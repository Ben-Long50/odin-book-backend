generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  googleId   String?   @unique
  facebookId String?   @unique
  email      String    @unique
  password   String?
  profiles   Profile[]
}

model Profile {
  id               Int           @id @default(autoincrement())
  username         String        @unique
  petName          String
  species          String?
  breed            String?
  bio              String?
  profilePicUrl    String?
  birthday         DateTime?
  active           Boolean
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  posts            Post[]
  comments         Comment[]
  postLikes        PostLike[]
  commentLikes     CommentLike[]
  followers        Follow[]      @relation("followerRelation") // Profiles that follow this profile
  following        Follow[]      @relation("followingRelation") // Profiles this profile is following
  personalSearches Search[]      @relation("activeProfileRelation")
  foreignSearches  Search[]      @relation("searchedRelation")
}

model Follow {
  profileId  Int
  followerId Int
  follower   Profile @relation("followerRelation", fields: [profileId], references: [id], onDelete: Cascade)
  following  Profile @relation("followingRelation", fields: [followerId], references: [id], onDelete: Cascade)

  @@id(name: "followId", [profileId, followerId]) // Use composite primary key
  @@unique([profileId, followerId]) // Ensures that a profile cannot follow the same profile more than once
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  mediaUrl  String
  body      String?
  published Boolean    @default(true)
  comments  Comment[]
  likes     PostLike[]
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
}

model Comment {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  body      String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     CommentLike[]
  profile   Profile?      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int?
}

model PostLike {
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int

  @@id(name: "postLikeId", [postId, profileId])
}

model CommentLike {
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int

  @@id(name: "commentLikeId", [commentId, profileId])
}

model Search {
  createdAt         DateTime @default(now())
  searchedProfileId Int
  profileId         Int
  searchedProfile   Profile  @relation("searchedRelation", fields: [searchedProfileId], references: [id], onDelete: Cascade)
  profile           Profile  @relation("activeProfileRelation", fields: [profileId], references: [id], onDelete: Cascade)

  @@id(name: "searchId", [searchedProfileId, profileId])
}

//run "npx prisma generate" after updating models

//run "npx prisma migrate dev" to migrate edited models to the database

//run "npx prisma db push" to copy models defined here to the linked db

//run "npx prisma db pull" to genereate models from the linked db
