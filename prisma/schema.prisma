generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  GUEST
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  googleId   String?   @unique
  facebookId String?   @unique
  email      String    @unique
  password   String?
  role       UserRole
  createdAt  DateTime  @default(now())
  profiles   Profile[]
}

model Profile {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  petName          String
  species          String?
  breed            String?
  bio              String?
  profilePicUrl    String?
  birthday         DateTime?
  active           Boolean
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  posts            Post[]
  comments         Comment[]
  postLikes        PostLike[]
  commentLikes     CommentLike[]
  followers        Follow[]       @relation("followerRelation")
  following        Follow[]       @relation("followingRelation")
  personalSearches Search[]       @relation("searchingRelation")
  foreignSearches  Search[]       @relation("searchedRelation")
  notified         Notification[] @relation("notifiedRelation")
  notifying        Notification[] @relation("notifyingRelation")
  bookmarks        Bookmark[]
}

model Follow {
  profileId    Int
  followerId   Int
  follower     Profile        @relation("followerRelation", fields: [profileId], references: [id], onDelete: Cascade)
  following    Profile        @relation("followingRelation", fields: [followerId], references: [id], onDelete: Cascade)
  Notification Notification[] @relation("followNotification")

  @@id(name: "followId", [profileId, followerId])
  @@unique([profileId, followerId])
}

model Post {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  mediaUrl     String
  body         String?
  published    Boolean        @default(true)
  comments     Comment[]
  likes        PostLike[]
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int
  Bookmark     Bookmark[]
  Notification Notification[] @relation("postShareNotification")
}

model Comment {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  body         String
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  likes        CommentLike[]
  profile      Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int?
  Notification Notification[] @relation("commentNotification")
}

model PostLike {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int
  Notification Notification[] @relation("postLikeNotification")

  @@unique([profileId, postId])
}

model CommentLike {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  comment      Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    Int
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int
  Notification Notification[] @relation("commentLikeNotification")

  @@unique([profileId, commentId])
}

model Search {
  createdAt         DateTime @default(now())
  searchedProfileId Int
  profileId         Int
  searchedProfile   Profile  @relation("searchedRelation", fields: [searchedProfileId], references: [id], onDelete: Cascade)
  profile           Profile  @relation("searchingRelation", fields: [profileId], references: [id], onDelete: Cascade)

  @@id(name: "searchId", [searchedProfileId, profileId])
}

model Notification {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  followerId        Int?
  followingId       Int?
  commentId         Int?
  postLikeId        Int?
  commentLikeId     Int?
  postId            Int?
  notifiedProfileId Int
  profileId         Int

  newFollow      Follow?      @relation("followNotification", fields: [followingId, followerId], references: [profileId, followerId], onDelete: Cascade)
  newComment     Comment?     @relation("commentNotification", fields: [commentId], references: [id], onDelete: Cascade)
  newPostLike    PostLike?    @relation("postLikeNotification", fields: [postLikeId], references: [id], onDelete: Cascade)
  newCommentLike CommentLike? @relation("commentLikeNotification", fields: [commentLikeId], references: [id], onDelete: Cascade)
  newPostShare   Post?        @relation("postShareNotification", fields: [postId], references: [id], onDelete: Cascade)

  notifiedProfile Profile @relation("notifiedRelation", fields: [notifiedProfileId], references: [id], onDelete: Cascade)
  profile         Profile @relation("notifyingRelation", fields: [profileId], references: [id], onDelete: Cascade)
}

model Bookmark {
  createdAt DateTime @default(now())
  profileId Int
  postId    Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([profileId, postId])
  @@unique([profileId, postId])
}

//run "npx prisma generate" after updating models

//run "npx prisma migrate dev" to migrate edited models to the database

//run "npx prisma db push" to copy models defined here to the linked db

//run "npx prisma db pull" to genereate models from the linked db
